# -*- coding: utf-8 -*-
"""
/***************************************************************************
 PolyArea
                                 A QGIS plugin
 You choose a polygonial layer, and this plugin will add to its attributes a new column that has the area of each polygon
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-01-15
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Ariel Turchinsky
        email                : ariel7590@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtWidgets import QFileDialog, QMessageBox
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.core import QgsProject
from qgis.PyQt.QtCore import *
from qgis.PyQt.QtGui import *
from qgis.PyQt.QtWidgets import *
from qgis.gui import QgsMessageBar
from qgis.core import *

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .poly_area_dialog import PolyAreaDialog
import os.path


class PolyArea:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'PolyArea_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Poly Area')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('PolyArea', message)

    def add_action(
            self,
            icon_path,
            text,
            callback,
            enabled_flag=True,
            add_to_menu=True,
            add_to_toolbar=True,
            status_tip=None,
            whats_this=None,
            parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/poly_area/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'PolyArea'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # initialize the main dialog
        self.dlg = PolyAreaDialog()
        # event for browse button
        self.dlg.browseButton.clicked.connect(self.browse)
        # event for save button
        self.dlg.saveBtn.clicked.connect(self.saveFile)

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Poly Area'),
                action)
            self.iface.removeToolBarIcon(action)

    def fillPolyLayersBox(self):
        """Fill the poligonal layers combobox with layers"""

        # Clear the contents of the comboBox from previous runs
        self.dlg.polyLayersBox.clear()
        # Populate the comboBox with names of all the loaded layers
        layers = QgsProject.instance().mapLayers()
        for key in layers:
            if type(layers[key]) == QgsVectorLayer and (
                    layers[key].wkbType() == QgsWkbTypes.MultiPolygon or layers[key].wkbType() == QgsWkbTypes.Polygon):
                self.dlg.polyLayersBox.addItem(layers[key].name())

    def measureArea(self):
        """Takes The layer that the user chose, measures its area/areas and passes the data to addAreaToLayer"""

        # Take the layer that is chosen by the layers combobox (polyLayerBox)
        layer = QgsProject.instance().mapLayersByName(self.dlg.polyLayersBox.currentText())[0]
        features = layer.getFeatures()  # create a features iterator for the layer
        distanceArea = QgsDistanceArea()
        distanceArea.setEllipsoid('EPSG:7030')  # make the calculation of the area ellipsoid
        areaList = []  # list of areas in a multipolygon layer
        mOrKm = True  # trur-meters / false-kilometeres
        for feature in features:
            geom = feature.geometry()  # the the geometry feature of the layer
            if layer.wkbType() == QgsWkbTypes.Polygon:  # if the type of the layer is just a single polygon
                polyPoints = geom.asPolygon()  # a list of list of points of the polygon
                if self.dlg.m2RBtn.isChecked() == True:  # checking if the user wants the area in m^2 or km^2
                    print(f'{distanceArea.measurePolygon(polyPoints[0])} m^2')
                    areaList.append(distanceArea.measurePolygon(polyPoints[0]))
                    mOrKm = True
                else:
                    print(f'{distanceArea.measurePolygon(polyPoints[0]) / 1000000} km^2')
                    areaList.append(distanceArea.measurePolygon(polyPoints[0]) / 1000000)
                    mOrKm = False
            else:  # if the type of the layer is multipolygon
                print(f'Area of polygon {feature.id() + 1}:')
                polyPoints = geom.asMultiPolygon()  # a list of list of list of points
                if self.dlg.m2RBtn.isChecked() == True:
                    print(f'{distanceArea.measurePolygon(polyPoints[0][0])} m^2')
                    areaList.append(distanceArea.measurePolygon(polyPoints[0][0]))
                    mOrKm = True
                else:
                    print(f'{distanceArea.measurePolygon(polyPoints[0][0]) / 1000000} km^2')
                    areaList.append(distanceArea.measurePolygon(polyPoints[0][0]) / 1000000)
                    mOrKm = False
        self.addAreaToLayer(layer, areaList, mOrKm)

    def addAreaToLayer(self, layer, areaList, mOrkm):
        """Adding the measured area to the chosen layer"""

        layer_provider = layer.dataProvider()  # an oboject of QgsVectorDataProvider
        fieldsList = layer.fields().names()  # list of names of columns
        addUpdateMB = QMessageBox()  # a messagebox object
        addUpdateMB.setStandardButtons(QMessageBox.Ok)
        fieldNum = len(fieldsList)  # number of the columns in the attribute table
        if mOrkm == True:
            if "Area(m^2)" not in fieldsList:
                layer_provider.addAttributes([QgsField("Area(m^2)", QVariant.Double)])  # adding the new field
                layer.updateFields()
                fieldNum = fieldNum + 1  # updating the number of columns
                print(f'Added column "{layer.fields().names()[fieldNum - 1]}" to layer "{layer.name()}"')
                addUpdateMB.setText("Area(m^2) column has been added!")
                addUpdateMB.exec()
            else:
                print(f'Column "{layer.fields().names()[fieldNum - 1]}" in layer "{layer.name()}" has been updated')
                addUpdateMB.setText("Area(m^2) column already exists, updating values!")
                addUpdateMB.exec()
        else:
            if "Area(km^2)" not in fieldsList:
                layer_provider.addAttributes([QgsField('Area(km^2)', QVariant.Double)])
                layer.updateFields()
                fieldNum = fieldNum + 1  # updating the number of columns
                print(f'Added column "{layer.fields().names()[fieldNum - 1]}" to layer "{layer.name()}"')
                addUpdateMB.setText("Area(km^2) column has been added!")
                addUpdateMB.exec()
            else:
                print(f'Column "{layer.fields().names()[fieldNum - 1]}" in layer "{layer.name()}" has been updated')
                addUpdateMB.setText("Area(km^2) column already exists, updating values!")
                addUpdateMB.exec()
        layer.startEditing()
        features = layer.getFeatures()  # create a features iterator for the layer
        fieldsList = layer.fields().names()  # updating the field list
        index = 0
        for f in features:
            id = f.id()
            if mOrkm == True:
                attr_value = {fieldsList.index('Area(m^2)'): areaList[index]}  # put the area in the right column
            else:
                attr_value = {fieldsList.index('Area(km^2)'): areaList[index]}
            layer_provider.changeAttributeValues({id: attr_value})
            index = index + 1
        layer.commitChanges()

    def browse(self):
        path, _filter = QFileDialog.getSaveFileName(self.dlg, "Select   output file ", "", '*.csv')
        if len(path) > 0:
            self.dlg.directoryLine.setText(path)

    def saveFile(self):
        try:
            path = self.dlg.directoryLine.text()
            if len(path) > 0:
                with open(path, 'w') as output_file:
                    selectedLayer = QgsProject.instance().mapLayersByName(self.dlg.polyLayersBox.currentText())[0]
                    fieldnames = []
                    for field in selectedLayer.fields():
                        if field.name() == "Area(m^2)" or field.name() == "Area(km^2)":
                            fieldnames.append(field.name())
                    # write header
                    if len(fieldnames) > 0:
                        line = ','.join(name for name in fieldnames) + '\n'
                        output_file.write(line)
                        # write feature attributes
                        for f in selectedLayer.getFeatures():
                            line = ','.join(str(f[name]) for name in fieldnames) + '\n'
                            output_file.write(line)
                        self.dlg.statusLbl.setStyleSheet("color: green;")
                        self.dlg.statusLbl.setText("File was successfully saved!")
                    else:
                        self.dlg.statusLbl.setStyleSheet("color: black;")
                        self.dlg.statusLbl.setText("No area columns were found!")
            else:
                raise Exception
        except:
            self.dlg.statusLbl.setStyleSheet("color: red;")
            self.dlg.statusLbl.setText("Failed to save the file!")

    def run(self):
        """Run method that performs all the real work"""

        # Fill the combobox of polygon layers with layer names
        self.fillPolyLayersBox()
        # Make the m^2 radio button checked by default
        self.dlg.m2RBtn.setChecked(True)
        # Clean the text of the status label
        self.dlg.statusLbl.setText("")
        # Clean the text of the directory line
        self.dlg.directoryLine.setText("")
        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            self.measureArea()
